<script src="https://cdnjs.cloudflare.com/ajax/libs/js-sha256/0.9.0/sha256.min.js"
    integrity="sha512-szJ5FSo9hEmXXe7b5AUVtn/WnL8a5VofnFeYC2i2z03uS2LhAch7ewNLbl5flsEmTTimMN0enBZg/3sQ+YOSzQ=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/aes-js/3.1.2/index.min.js"
    integrity="sha512-LOqfKFwH2W3jeb0NzXcImFlSyoL7hjsWbZvIeKNOaZw1gFw+yKTE/QUDGLit2KWdd57qd6IgMDkppK2tkwIEhA=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="/chipher.js"></script>
<style>
    .link {
        cursor: pointer;
        color: blue;
    }

    .dir {
        cursor: pointer;
        color: yellowgreen;
    }

    .file {
        cursor: pointer;
        color: black;
    }

    .del {
        cursor: pointer;
        color: red;
    }

    .rn {
        cursor: pointer;
        color:blue
    }

    body {
        font-family: Verdana, Arial, Helvetica, sans-serif;
        font-size: 24px;
        line-height: 28px
    }
</style>
<script>
    let paths = [];
    let Snonce = '{server_code}'
    let key = keyGen(prompt('Password: ', ''), Snonce)
    function status_statement(sc) {
        switch (sc) {
            case '0': return 'Command complete.'
            case '1': return 'Replay package not allowed.'
            case '2': return 'Server decryption error.'
            case '3': return 'Path not found.'
            case '4': return 'Command not found.'
            case '5': return 'Path not allowed.'
            case '6': return 'Command not allowed.'
            default: return 'Status code not found.'
        }
    }
    function status_code(sc) {
        return alert(status_statement(sc))
    }
    function pack_url(cipher, url, Cnonce) {
        let pack = cipher.encrypt(aesjs.utils.utf8.toBytes(url))
        c = aesjs.utils.hex.fromBytes(pack[2])
        return `/?c=${c}&nonce=${Cnonce}&padding=${pack[0]}&digest=${pack[1]}`
    }
    function updateDirGlobal(path) {
        let url = '/ls/' + path
        let Cnonce = random();
        let iv = ivGen(Cnonce, Snonce)
        let cipher = new Cipher(key, iv)
        url = pack_url(cipher, url, Cnonce);
        let digest, padding, sc
        fetch(url, {
            method: 'GET'
        }).then(res => {
            digest = res.headers.get('digest')
            padding = parseInt(res.headers.get('padding'))
            sc = res.headers.get('status')
            return res.arrayBuffer();
        }).then(data => {

            if (sc != '0') {
                status_code(sc)
                if (sc == '2')
                    return location.reload()
                return
            }
            data = new Uint8Array(data)
            data = cipher.decrypt([padding, digest, data])
            if(data==null)
                return alert('Client decryption error.')
            data = aesjs.utils.utf8.fromBytes(data)
            data = JSON.parse(data)
            //path
            let pathhtm = document.getElementById('path')
            pathhtm.innerHTML = ''
            paths = path.split('/')
            path = ''
            pathhtm.innerHTML += `<span onclick="updateDirGlobal('')" class="link">/     </span>`
            for (let i in paths) {
                if (paths[i] == '')
                    continue
                path += paths[i] + '/'
                pathhtm.innerHTML += `<span onclick="updateDirGlobal('${path}')" class="link">${paths[i]}/     </span>`
            }
            //content
            files = data.files;
            dirs = data.dirs;
            let content = document.getElementById('content');
            content.innerHTML = '';
            for (let i in dirs) {
                content.innerHTML += `<tr><td onclick="updateDirLocal('${dirs[i]}')" class="dir">${dirs[i]}/</td><td onclick="deleteDir('${dirs[i]}')"class="del">delete</td><td onclick="renameDir('${dirs[i]}')"class="rn">rename</td></tr>`
            }
            for (let i in files) {
                content.innerHTML += `<tr><td onclick="downloadFile('${files[i]}')" class="file">${files[i]}</td><td onclick="deleteFile('${files[i]}')"class="del">delete</td><td onclick="renameFile('${files[i]}')"class="rn">rename</td></tr>`
            }
        })
    }
    function updateDirLocal(click) {
        let path = ''
        for (let i in paths) {
            if (paths[i] != '')
                path += paths[i] + '/'
        }
        path += click
        updateDirGlobal(path);
    }
    function downloadFile(click) {
        let path = ''
        for (let i in paths) {
            path += paths[i] + '/'
        }
        path += click
        let url = '/file/' + path;
        let Cnonce = random();
        let iv = ivGen(Cnonce, Snonce)
        let cipher = new Cipher(key, iv)
        url = pack_url(cipher, url, Cnonce);
        let digest, padding, sc
        fetch(url, {
            method: 'GET'
        }).then(res => {
            digest = res.headers.get('digest')
            padding = parseInt(res.headers.get('padding'))
            sc = res.headers.get('status')
            return res.arrayBuffer();
        }).then(data => {
            if (sc != '0')
                return status_code(sc)
            data = new Uint8Array(data)
            data = cipher.decrypt([padding, digest, data])
            if(data==null)
                return alert('Client decryption error.')
            let a = document.createElement('a');
            a.href = URL.createObjectURL(new Blob([data]));
            a.download = click;
            document.body.appendChild(a);
            a.click();
            a.remove();
        })
    }
    function downloadZip() {
        let path = ''
        for (let i in paths) {
            path += paths[i] + '/'
        }
        let url = '/zip/' + path;
        let Cnonce = random();
        let iv = ivGen(Cnonce, Snonce)
        let cipher = new Cipher(key, iv)
        url = pack_url(cipher, url, Cnonce);
        let padding, digest, sc
        fetch(url, {
            method: 'GET'
        }).then(res => {
            padding = parseInt(res.headers.get('padding'))
            digest = res.headers.get('digest')
            sc = res.headers.get('status')
            return res.arrayBuffer();
        }).then(data => {
            if (sc != '0')
                return status_code(sc)
            data = new Uint8Array(data);
            data = cipher.decrypt([padding, digest, data])
            if(data==null)
                return alert('Client decryption error.')
            let a = document.createElement('a');
            a.href = URL.createObjectURL(new Blob([data]));
            a.download = 'folder.zip'
            document.body.appendChild(a);
            a.click();
            a.remove();
        })
    }
    async function sendFile() {
        let path = '/upload/'
        for (let i in paths) {
            path += paths[i] + '/'
        }
        let files = document.getElementById('file').files;
        let txt = ''
        for (let i = 0; i < files.length; i++) {
            let body = await files[i].arrayBuffer()
            body = new Uint8Array(body)
            let Cnonce = random();
            let iv = ivGen(Cnonce, Snonce)
            let cipher = new Cipher(key, iv)
            body = cipher.encrypt(body)
            let url = `${path + files[i].name}?padding=${body[0]}&digest=${body[1]}`
            url = pack_url(cipher, url, Cnonce);
            let res = await fetch(url, {
                body: body[2],
                method: 'POST'
            })
            txt += status_statement(res.headers.get('status')) + '\n';
        }
        alert(txt)
        updateDirLocal('')
    }
    function createFolder() {
        let path = '/'
        for (let i in paths) {
            if (paths[i] != '')
                path += paths[i] + '/'
        }
        path = prompt('Folder path: ', path)
        if (path == null)
            return alert('Cancel.')
        let url = '/mkdir' + path;
        let Cnonce = random();
        let iv = ivGen(Cnonce, Snonce)
        let cipher = new Cipher(key, iv)
        url = pack_url(cipher, url, Cnonce);
        fetch(url, {
            method: 'PUT'
        }).then(res => {
            status_code(res.headers.get('status'))
            updateDirLocal('')
        })
    }
    function deleteFile(click) {
        if (prompt('Enter "delete" to comfirm.') != 'delete')
            return alert('Cancel.')
        let path = '/rmfile/'
        for (let i in paths) {
            path += paths[i] + '/'
        }
        path += click
        let url = path
        let Cnonce = random();
        let iv = ivGen(Cnonce, Snonce)
        let cipher = new Cipher(key, iv)
        url = pack_url(cipher, url, Cnonce);
        fetch(url, {
            method: 'DELETE'
        }).then(res => {
            status_code(res.headers.get('status'))
            updateDirLocal('')
        })
    }
    function deleteDir(click) {
        if (prompt('Enter "delete" to comfirm.') != 'delete')
            return alert('Cancel.')
        let path = '/rmdir/'
        for (let i in paths) {
            path += paths[i] + '/'
        }
        path += click
        let url = path
        let Cnonce = random();
        let iv = ivGen(Cnonce, Snonce)
        let cipher = new Cipher(key, iv)
        url = pack_url(cipher, url, Cnonce);
        fetch(url, {
            method: 'DELETE'
        }).then(res => {
            status_code(res.headers.get('status'))
            updateDirLocal('')
        })
    }
    function renameDir(click) {
        let path = '/'
        for (let i in paths) {
            if (paths[i] != '')
                path += paths[i] + '/'
        }
        path += click
        newpath = prompt('New folder name: ', path)
        if (newpath == null)
            return alert('Cancel.')
        let url = '/rndir' + path + '?newpath=' + newpath
        let Cnonce = random();
        let iv = ivGen(Cnonce, Snonce)
        let cipher = new Cipher(key, iv)
        url = pack_url(cipher, url, Cnonce);
        fetch(url, {
            method: 'PATCH'
        }).then(res => {
            status_code(res.headers.get('status'))
            updateDirLocal('')
        })
    }
    function renameFile(click) {
        let path = '/'
        for (let i in paths) {
            if (paths[i] != '')
                path += paths[i] + '/'
        }
        path += click
        newpath = prompt('New file name: ', path)
        if (newpath == null)
            return alert('Cancel.')
        let url = '/rnfile' + path + '?newpath=' + newpath
        let Cnonce = random();
        let iv = ivGen(Cnonce, Snonce)
        let cipher = new Cipher(key, iv)
        url = pack_url(cipher, url, Cnonce);
        fetch(url, {
            method: 'PATCH'
        }).then(res => {
            status_code(res.headers.get('status'))
            updateDirLocal('')
        })
    }
</script>

<body onload="updateDirGlobal('')">
    <div id="path"></div>
    <input type="file" multiple="true" onchange="sendFile()" id="file"><br/>
    <button onclick="createFolder()">Create new folder</button>
    <button onclick="downloadZip()">Download Folder (zip)</button>
    <table id="content"></table>
</body>