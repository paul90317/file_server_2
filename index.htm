<script src="https://cdnjs.cloudflare.com/ajax/libs/js-sha256/0.9.0/sha256.min.js"
    integrity="sha512-szJ5FSo9hEmXXe7b5AUVtn/WnL8a5VofnFeYC2i2z03uS2LhAch7ewNLbl5flsEmTTimMN0enBZg/3sQ+YOSzQ=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/aes-js/3.1.2/index.min.js"
    integrity="sha512-LOqfKFwH2W3jeb0NzXcImFlSyoL7hjsWbZvIeKNOaZw1gFw+yKTE/QUDGLit2KWdd57qd6IgMDkppK2tkwIEhA=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="/chipher.js"></script>
<script>
    let paths = [];
    let Snonce = '{server_code}'
    let key = aesjs.utils.hex.toBytes(sha256(Snonce + '*' + prompt('password: ', '')))

    function pack_url(cipher, url,Cnonce) {
        let c = cipher.encrypt(aesjs.utils.utf8.toBytes(url))
        c = aesjs.utils.hex.fromBytes(c)
        return `/?c=${c}&nonce=${Cnonce}`
    }
    function updateDirGlobal(path) {
        let url = '/dir/' + path
        let Cnonce = random();
        let iv=ivGen(Cnonce,Snonce)
        let cipher=new Cipher(key,iv)
        url = pack_url(cipher,url,Cnonce);
        fetch(url)
            .then(res => {
                return res.arrayBuffer();
            })
            .then(data => {
                if (data.byteLength == 0)
                    return alert('folder not found.')
                try {
                    data = cipher.decrypt(new Uint8Array(data))
                    data = aesjs.utils.utf8.fromBytes(data)
                    data = JSON.parse(data)
                } catch (err) {
                    console.log(err)
                    return alert('folder not found.')
                }
                //path
                let pathhtm = document.getElementById('path')
                pathhtm.innerHTML = ''
                paths = path.split('/')
                path = ''
                pathhtm.innerHTML += `<span onclick="updateDirGlobal('')">/</span>`
                for (let i in paths) {
                    if (paths[i] == '')
                        continue
                    path += paths[i] + '/'
                    pathhtm.innerHTML += `<span onclick="updateDirGlobal('${path}')">${paths[i]}/</span>`
                }
                //content
                files = data.files;
                dirs = data.dirs;
                let content = document.getElementById('content');
                content.innerHTML = '';
                for (let i in dirs) {
                    content.innerHTML += `<div><span onclick="updateDirLocal('${dirs[i]}')">${dirs[i]}/</span>    <span onclick="deleteDir('${dirs[i]}')">delete</span>    <span onclick="renameDir('${dirs[i]}')">rename</span></div>`
                }
                for (let i in files) {
                    content.innerHTML += `<div><span onclick="downloadFile('${files[i]}')">${files[i]}</span>    <span onclick="deleteFile('${files[i]}')">delete</span>    <span onclick="renameFile('${files[i]}')">rename</span></div>`
                }
            })
    }
    function updateDirLocal(click) {
        let path = ''
        for (let i in paths) {
            if (paths[i] != '')
                path += paths[i] + '/'
        }
        path += click
        updateDirGlobal(path);
    }
    function downloadFile(click) {
        let path = ''
        for (let i in paths) {
            path += paths[i] + '/'
        }
        path += click
        let url = '/file/' + path;
        let Cnonce = random();
        let iv=ivGen(Cnonce,Snonce)
        let cipher=new Cipher(key,iv)
        url = pack_url(cipher,url,Cnonce);
        fetch(url)
            .then(res => {
                return res.blob();
            })
            .then(blob => {
                return blob.arrayBuffer();
            })
            .then(data => {
                if (data.byteLength == 0)
                    return alert('empty file.')
                data = new Uint8Array(data)
                data = cipher.decrypt(data)
                let a = document.createElement('a');
                blob = new Blob([data])
                a.href = URL.createObjectURL(blob);
                a.download = click;
                document.body.appendChild(a);
                a.click();
                a.remove();
            })
    }
    function downloadZip() {
        let path = ''
        for (let i in paths) {
            path += paths[i] + '/'
        }
        let url = '/zip/' + path;
        let Cnonce = random();
        let iv=ivGen(Cnonce,Snonce)
        let cipher=new Cipher(key,iv)
        url = pack_url(cipher,url,Cnonce);
        fetch(url)
            .then(res => {
                return res.blob();
            })
            .then(blob => {
                return blob.arrayBuffer();
            })
            .then(data => {
                if (data.byteLength == 0)
                    return alert('empty file.')
                data = new Uint8Array(data);
                data = cipher.decrypt(data)
                let a = document.createElement('a');
                a.href = URL.createObjectURL(new Blob([data]));
                console.log(paths)
                a.download='folder.zip'
                document.body.appendChild(a);
                a.click();
                a.remove();
            })
    }
    async function sendFile() {
        let path = '/file/'
        for (let i in paths) {
            path += paths[i] + '/'
        }
        let files = document.getElementById('file').files;
        let txt = ''
        for (let i = 0; i < files.length; i++) {
            let client_code = random();
            let body = await files[i].arrayBuffer()
            body = new Uint8Array(body)
            let url=path + files[i].name
            let Cnonce = random();
            let iv=ivGen(Cnonce,Snonce)
            let cipher=new Cipher(key,iv)
            url = pack_url(cipher,url,Cnonce);
            body = cipher.encrypt(body)
            let res = await fetch(url, {
                body: body,
                method: 'POST'
            })
            txt += (await res.text()) + '\n';
        }
        alert(txt)
        updateDirLocal('')
    }
    function createFolder() {
        let path = '/'
        for (let i in paths) {
            if (paths[i] != '')
                path += paths[i] + '/'
        }
        path = prompt('Folder path: ', path);;
        let url = '/dir' + path;
        let Cnonce = random();
        let iv=ivGen(Cnonce,Snonce)
        let cipher=new Cipher(key,iv)
        url = pack_url(cipher,url,Cnonce);
        fetch(url, {
            method: 'POST'
        }).then(res => res.text())
            .then(txt => {
                alert(txt)
                updateDirLocal('')
            })
    }
    function deleteFile(click) {
        let path = '/file/'
        for (let i in paths) {
            path += paths[i] + '/'
        }
        path += click
        let url = path
        let Cnonce = random();
        let iv=ivGen(Cnonce,Snonce)
        let cipher=new Cipher(key,iv)
        url = pack_url(cipher,url,Cnonce);
        fetch(url, {
            method: 'DELETE'
        }).then(res => res.text())
            .then(txt => {
                alert(txt)
                updateDirLocal('')
            })
    }
    function deleteDir(click) {
        let path = '/dir/'
        for (let i in paths) {
            path += paths[i] + '/'
        }
        path += click
        let url = path
        let Cnonce = random();
        let iv=ivGen(Cnonce,Snonce)
        let cipher=new Cipher(key,iv)
        url = pack_url(cipher,url,Cnonce);
        fetch(url, {
            method: 'DELETE'
        }).then(res => res.text())
            .then(txt => {
                alert(txt)
                updateDirLocal('')
            })
    }
    function renameDir(click) {
        let path = '/'
        for (let i in paths) {
            if (paths[i] != '')
                path += paths[i] + '/'
        }
        path += click
        newpath = prompt('New folder name: ', path)
        let url = '/dir' + path + '?newpath=' + newpath
        let Cnonce = random();
        let iv=ivGen(Cnonce,Snonce)
        let cipher=new Cipher(key,iv)
        url = pack_url(cipher,url,Cnonce);
        fetch(url, {
            method: 'PATCH'
        }).then(res => res.text())
            .then(txt => {
                alert(txt)
                updateDirLocal('')
            })
    }
    function renameFile(click) {
        let path = '/'
        for (let i in paths) {
            if (paths[i] != '')
                path += paths[i] + '/'
        }
        path += click
        newpath = prompt('New file name: ', path)
        let url = '/file' + path + '?newpath=' + newpath
        let Cnonce = random();
        let iv=ivGen(Cnonce,Snonce)
        let cipher=new Cipher(key,iv)
        url = pack_url(cipher,url,Cnonce);
        fetch(url, {
            method: 'PATCH'
        }).then(res => res.text())
            .then(txt => {
                alert(txt)
                updateDirLocal('')
            })
    }
</script>

<body onload="updateDirGlobal('')">
    <div id="path"></div>
    <input type="file" multiple="true" onchange="sendFile()" id="file">
    <button onclick="createFolder()">Create new folder</button>
    <button onclick="downloadZip()">Download Folder (zip)</button>
    <div id="content"></div>
</body>